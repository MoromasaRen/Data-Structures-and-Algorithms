#include <stdio.h>
#include <stdlib.h>

typedef struct Node {
    int data;
    struct Node* next;
} *Node_Ptr, Node;

typedef struct {
    Node* head;
    int count;
} List;

List* initialize();
Node* createNode(int data);
void insertFirst(List *L, int data);
void insertLast();
void insertAt();
void insertSorted();
void deleteFirst();
void deleteLast();
void deletePos();
void update();
int locate();
int retrieve();
void display();
void free();

int main () {

    List *L = initialize();

    return 0;
}


List* initialize(){
    List* newList = malloc(sizeof(List));
    if(newList == NULL){
        printf("Memory Allocation Failed.\n");
        return -1;
    }
    newList->head = NULL;
    newList->count = 0;
    return newList;
}

Node* createNode(int data){
    Node* newNode = malloc(sizeof(Node));
    if(newNode == NULL){
        printf("Memory Allocation Failed.\n");
        return -1;
    }
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}

void insertFirst(List* L, int data){
    Node* newNode = createNode(data);
    if(L == NULL){
        printf("List is empty.\n");
    }
    newNode->next = L->head;
    L->head = newNode;
    L->count++;
}

void insertLast(){
    
}

void insertAt();
void insertSorted();
void deleteFirst();
void deleteLast();
void deletePos();
void update();
int locate();
int retrieve();
void display();
void free();